// @lang=tda @ts=2

module proc_property_suite(reset,clk, IR, REG_FILE,CONTROL_STATE,
dataIn, writeEnable, dataOut,dataAddr,instrAddr,instrIn);

input logic reset;
input logic clk;
input logic [15:0] IR;
input logic [7:0][7:0] REG_FILE;
input logic [2:0] CONTROL_STATE;
input logic [7:0] dataIn;
input logic writeEnable;
input logic [7:0] dataOut;
input logic [7:0] dataAddr;
input logic [15:0] instrAddr;
input logic [15:0] instrIn;

parameter c_IF  = 3'b001;
parameter c_ID  = 3'b010;
parameter c_EX  = 3'b011;
parameter c_MEM = 3'b100;
parameter c_WB  = 3'b101;

parameter c_ALU_REG = 4'b0001;

parameter c_ADD_IMM = 4'b0010;
parameter c_OR_IMM  = 4'b0011;

parameter c_LOAD    = 4'b0100;
parameter c_STORE   = 4'b0101;

parameter c_JUMP    = 4'b0110;
parameter c_BRANCH  = 4'b0111;

parameter c_ADD     = 3'b001;
parameter c_OR      = 3'b010;

// sequence definition for SVA property

`define true 1

`include "tidal.sv"

`begin_tda(ops)

// sequence definition for TiDAL property

sequence seq_cs;
	t##1 CONTROL_STATE == c_EX and
	t##2 CONTROL_STATE == c_MEM and
	t##3 CONTROL_STATE == c_WB;
endsequence 

// your operational properties

// OR_IMM - Ok
property or_imm;
logic [2:0] rs1_t, rd_t;
logic [5:0] imm_t;
logic [7:0] content_rs1_t;
  t##0 set_freeze(rs1_t, IR[11:9]) and
  t##0 set_freeze(rd_t, IR[8:6]) and
  t##0 set_freeze(imm_t, IR[5:0]) and
  t##0 set_freeze(content_rs1_t, (rs1_t == 0 ? 8'b0 : REG_FILE[rs1_t])) and
  t##0 CONTROL_STATE == c_ID and
  t##0 IR[15:12] == c_OR_IMM
implies
	seq_cs and
	t##4 (rd_t == 0) ? 1 :
		REG_FILE[rd_t] == content_rs1_t | imm_t[5] == 1'b1 ? {2'b11, imm_t} : {2'b00, imm_t};
endproperty

//OR_REG

property or_reg;
logic [2:0] rs1_t, rs2_t, rd_t;
logic [7:0] content_rs1_t, content_rs2_t;
	t##0 set_freeze(rs1_t, IR[11:9]) and
	t##0 set_freeze(rs2_t, IR[8:6]) and
	t##0 set_freeze(rd_t, IR[5:3]) and
	t##0 set_freeze(content_rs1_t, (rs1_t == 0 ? 8'b0 : REG_FILE[rs1_t])) and
	t##0 set_freeze(content_rs2_t, (rs2_t == 0 ? 8'b0 : REG_FILE[rs2_t])) and
	t##0 CONTROL_STATE == c_ID and
	t##0 IR[15:12] == c_ALU_REG and
	t##0 IR[2:0] == c_OR
implies
	seq_cs and
	t##4 (rd_t == 0) ? 1 :
		REG_FILE[rd_t] == content_rs1_t | content_rs2_t;
endproperty

//ADD_IMM

property add_imm;
logic [2:0] rs1_t, rd_t;
logic [5:0] imm_t;
logic [7:0] content_rs1_t;
	t##0 set_freeze(rs1_t, IR[11:9]) and
	t##0 set_freeze(rd_t, IR[8:6]) and
	t##0 set_freeze(imm_t, IR[5:0]) and
	t##0 set_freeze(content_rs1_t, (rs1_t == 0 ? 8'b0 : REG_FILE[rs1_t])) and
	t##0 CONTROL_STATE == c_ID and
	t##0 IR[15:12] == c_ADD_IMM
implies
	seq_cs and
	t##4 (rd_t == 0) ? 1:
		REG_FILE[rd_t] == content_rs1_t + imm_t[5] == 1'b1 ? {2'b11, imm_t} : {2'b00, imm_t};
endproperty

//ADD_REG

property add_reg;
logic [2:0] rs1_t,rs2_t, rd_t;
logic [7:0] content_rs1_t, content_rs2_t;
	t##0 set_freeze(rs1_t, IR[11:9]) and
	t##0 set_freeze(rs2_t, IR[8:6]) and
 	t##0 set_freeze(rd_t, IR[5:3]) and
	t##0 set_freeze(content_rs1_t, (rs1_t == 0 ? 8'b0 : REG_FILE[rs1_t])) and
	t##0 set_freeze(content_rs2_t, (rs2_t == 0 ? 8'b0 : REG_FILE[rs2_t])) and
	t##0 CONTROL_STATE == c_ID and
	t##0 IR[15:12] == c_ALU_REG and
	t##0 IR[2:0] == c_ADD
implies
	seq_cs and
	t##4 (rd_t == 0) ? 1:
		REG_FILE[rd_t] == content_rs1_t + content_rs2_t;
endproperty

//LOAD

property load;
logic [2:0] rs1_t,rd_t;
logic [5:0] imm_t;
logic [7:0] content_rs1_t, mem_t;
	t##0 set_freeze(rs1_t, IR[11:9]) and
	t##0 set_freeze(rd_t, IR[8:6]) and
	t##0 set_freeze(imm_t, IR[5:0]) and
	t##0 set_freeze(content_rs1_t,(rs1_t == 0 ? 8'b0 : REG_FILE[rs1_t])) and
	t##0 CONTROL_STATE == c_ID and
	t##0 IR[15:12] == c_LOAD and
	t##2 set_freeze(mem_t, dataIn)
implies
	seq_cs and
	t##2 dataAddr == content_rs1_t + imm_t[5] == 1'b1 ? {2'b11, imm_t} : {2'b00, imm_t} and
	t##4 (rd_t == 0) ? 1:
		REG_FILE[rd_t] == mem_t;
endproperty

//STORE

property store;
logic [2:0] rs1_t, rs2_t;
logic [5:0] imm_t;
logic [7:0] content_rs1_t, content_rs2_t;
	t##0 set_freeze(rs1_t, IR[11:9]) and
	t##0 set_freeze(rs2_t, IR[8:6]) and
	t##0 set_freeze(imm_t, IR[5:0]) and
	t##0 set_freeze(content_rs1_t, (rs1_t == 0 ? 8'b0 : REG_FILE[rs1_t])) and
	t##0 set_freeze(content_rs2_t, (rs2_t == 0 ? 8'b0 : REG_FILE[rs2_t])) and
	t##0 CONTROL_STATE == c_ID and
	t##0 IR[15:12] == c_STORE
implies
	seq_cs and
	t##2 dataAddr == content_rs1_t + imm_t[5] == 1'b1 ? {2'b11, imm_t} : {2'b00, imm_t} and
	t##2 writeEnable == 1'b1 and
	t##2 dataOut == content_rs2_t;
endproperty	
	
//LOAD AND STORE

property load_store;
logic [2:0] rs1_t;
logic [5:0] imm_t;
logic [7:0] content_rs1_t;
	t##0 set_freeze(rs1_t, IR[11:9]) and
	t##0 set_freeze(imm_t, IR[5:0]) and
	t##0 set_freeze(content_rs1_t, (rs1_t == 0 ? 8'b0 : REG_FILE[rs1_t])) and
	t##0 CONTROL_STATE == c_ID and
	t##0 (IR[15:12] == c_LOAD or IR[15:12] == c_STORE)
implies
	t##2 dataAddr == content_rs1_t + imm_t[5] == 1'b1 ? {2'b11, imm_t} : {2'b00, imm_t};
endproperty

//INTR POINTER

property instr_addr_pointer;
	t##1 !($stable(instrAddr))
implies
	t##0 CONTROL_STATE == c_ID and
	(t##0 IR[15:12] == c_BRANCH or t##0 IR[15:12] == c_JUMP) or
	t##0 CONTROL_STATE == c_IF;
endproperty

//JMP

property jump;
logic[15:0] next_t;
	t##0 IR[15:12] == c_JUMP and
	t##0 CONTROL_STATE == c_ID and
	t##0 set_freeze(next_t, instrAddr +16'd2 + {{ 4 { IR[11] } }, IR[11:0] })
implies
	t##2 instrAddr == next_t;
endproperty

//BRANCH

property branch;
logic[2:0] rs1_t;
logic[7:0] content_rs1_t;
logic[8:0] offset_t;
	t##0 set_freeze(rs1_t, IR[11:9]) and
	t##0 set_freeze(content_rs1_t, (rs1_t == 0 ? 2'd0 : REG_FILE[rs1_t])) and
	t##0 set_freeze(offset_t, IR[8:0]) and
	t##0 CONTROL_STATE == c_ID and
	t##0 IR[15:12] == c_BRANCH
implies
	t##2 CONTROL_STATE == c_ID and
	t##2 instrAddr == (content_rs1_t == 2'h00 ? ($past(instrAddr,2) + 16'd2 + (offset_t[8]== 1'b1 ? {7'd127, offset_t} : {7'd0, offset_t})) : $past(instrAddr,2) + 16'd2);
endproperty;

// assert your properties

assert_or_imm : assert property (@(posedge clk) disable iff(reset==1) or_imm);
assert_or : assert property (@(posedge clk) disable iff(reset==1) or_reg);
assert_add_imm : assert property (@(posedge clk) disable iff(reset==1) add_imm);
assert_add_reg : assert property (@(posedge clk) disable iff(reset==1) add_reg);
assert_load : assert property (@(posedge clk) disable iff(reset==1) load);
assert_store : assert property (@(posedge clk) disable iff(reset==1) store);
assert_load_store : assert property (@(posedge clk) disable iff(reset==1) load_store);
assert_intr_addr_pointer : assert property (@(posedge clk) disable iff(reset==1) instr_addr_pointer);
assert_jump : assert property (@(posedge clk) disable iff(reset==1) jump);
assert_branch: assert property(@(posedge clk) disable iff(reset ==1) branch);
`end_tda

endmodule

// your bind statement
bind proc proc_property_suite proc_property_bind(.*);
