// @lang=tda @ts=2

module readserial_property_suite(clk,reset_n, rxd,data,valid,state_s,data_i, cnt_s,cnt_en);

//logics
input logic clk, reset_n, rxd, valid, state_s, cnt_en;
input logic [2:0] cnt_s;
input logic [7:0] data, data_i;

//parameters

parameter IDLE		= 1'b0;
parameter READDATA	= 1'b1;

//sequence definition 

sequence reset_sequence;
	reset_n == 1'b0;
endsequence;

sequence idle_sequence;
	state_s == IDLE and
	cnt_en == 0 and
	cnt_s == 0;
endsequence

sequence in_idle_counter_is_0;
	state_s == READDATA or cnt_s == 0;
endsequence

sequence in_idle_counter_not_enabled;
		state_s == READDATA || cnt_en == 0;
endsequence

//TiDAL setup

`define true 1
`include "tidal.sv"
`begin_tda(ops)

//properties

property reset;
	reset_sequence |=>
	t##0 state_s == IDLE and
	t##0 cnt_s == 0 and
	t##0 cnt_en == 0 and
	t##0 valid == 0;
endproperty

property stay_in_idle;
	t##0 idle_sequence and
	t##0 rxd == 1
	implies
	t##1 valid == 0 and
	t##1 state_s == IDLE;
endproperty

property read_byte;
logic [7:0] data_t;
	t##0 idle_sequence and
	t##0 in_idle_counter_is_0 and
	t##0 in_idle_counter_not_enabled and
	t##0 rxd == 0 and
	t##8 set_freeze(data_t, {
        $past(rxd, 7),
        $past(rxd, 6),
        $past(rxd, 5),
        $past(rxd, 4),
        $past(rxd, 3),
        $past(rxd, 2),
        $past(rxd, 1),
        $past(rxd, 0)
    } )
		implies
		t##1 state_s == READDATA and
		t##1 (valid == 0)[*8] and
		t##9 data == data_t and
		t##9 $rose(valid) and	
		t##9 idle_sequence;
endproperty

property in_idle_counter_is_0__base;
	t##0 reset_sequence
	implies
	t##0 in_idle_counter_is_0 and
	t##1 in_idle_counter_is_0;
endproperty

property in_idle_counter_not_enabled__base;
    t##0 reset_sequence
  implies
    t##1 in_idle_counter_not_enabled;
endproperty


property in_idle_counter_is_0__step;
	t##0 in_idle_counter_is_0 and
	t##1 in_idle_counter_is_0
	implies
	t##2 in_idle_counter_is_0;
endproperty

property in_idle_counter_not_enabled__step;
  t##0 in_idle_counter_not_enabled
  implies
  t##1 in_idle_counter_not_enabled;
endproperty



//assert properties

a_reset: assert property (@(posedge clk) reset);
a_stay_in_idle: assert property (@(posedge clk) stay_in_idle);
a_read_byte: assert property (@(posedge clk) disable iff(reset_n==0) read_byte);
a_in_idle_counter_not_enabled__base: assert property(@(posedge clk) in_idle_counter_not_enabled__base);
a_in_idle_counter_not_enabled__step: assert property(@(posedge clk) in_idle_counter_not_enabled__step);
a_in_idle_counter_is_0__base: assert property(@(posedge clk) in_idle_counter_is_0__base);
a_in_idle_counter_is_0_step: assert property (@(posedge clk) disable iff(reset_n==0) in_idle_counter_is_0__step);


`end_tda
endmodule

//bind statement
bind readserial readserial_property_suite inst_readserial_properties(.*);